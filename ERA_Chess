#include <AccelStepper.h>
#include <ESP32Servo.h>

float theta1;
float theta2;

float x;
float y;
float z;

float delta;

float theta3;
float psi = 180; //Desired gripper orientation. Offsetting for servo tolerance

const int wristPin = 2;
const int gripperPin = 1;
const int gripPitchPin = 8; 
const int numRows = 8;
const int numCols = 8;
const int depth = 3;

const float timeToTarget = 3;
unsigned long prevMillis = 0;

int serialNum = 0;

int j1Speed;
int j2Speed;
int baseSpeed;

float j1MaxDis = 0;
float j2MaxDis = 0;
float baseMaxDis = 0;

int reqRow = 0;
int reqCol = 0;

int gripperNum = 1;
int gripperCount = 0;

bool piece;
bool down;
bool up;
bool grab = true;

//Create 3D array to hold the chess board's positions. (8 rows, 8 columns, 3 values in each sub-array(x, y, z))
int chessBoard[numRows][numCols][depth] = 
{
  //The coordinates of each piece on a chess board
  {{248, -267, 164}, {245, -268, 116}, {243, -269, 69}, {241, -270, 19}, {239, -271, -27}, {237, -272, -75}, {235, -273, -122}, {233, -274, -170}},
  {{297, -271, 164}, {295, -272, 115}, {293, -272, 68}, {291, -273, 20}, {288, -274, -28}, {286, -274, -77}, {284, -275, -124}, {282, -276, -172}},
  {{346, -275, 163}, {344, -276, 114}, {342, -275, 67}, {340, -276, 22}, {337, -277, -29}, {335, -276, -79}, {333, -277, -126}, {331, -278, -174}},
  {{394, -379, 162}, {392, -280, 113}, {390, -279, 66}, {388, -278, 23}, {385, -280, -31}, {383, -279, -80}, {381, -279, -127}, {379, -279, -175}},
  {{443, -283, 162}, {441, -283, 112}, {439, -282, 65}, {437, -281, 23}, {434, -283, -32}, {432, -281, -82}, {430, -281, -128}, {428, -281, -176}},
  {{492, -287, 161}, {490, -287, 112}, {488, -285, 64}, {486, -284, 24}, {483, -285, -33}, {481, -283, -83}, {479, -283, -130}, {477, -282, -178}},
  {{541, -292, 160}, {539, -291, 111}, {537, -289, 63}, {535, -288, 25}, {532, -287, -34}, {530, -286, -83}, {528, -285, -132}, {526, -283, -180}},
  {{586, -295, 162}, {590, -297, 118}, {590, -297, 70}, {590, -297, 22}, {590, -297, -26}, {590, -313, -74}, {590, -297, -122}, {552, -317, -176}}
  // a  b  c  d  e  f  g  h
  //Called as [row, col, position in array]
};

Servo wrist;  //Create servo object to control a servo
Servo gripper;  //Create servo object to control a servo
AccelStepper baseStepper(1, 5, 4);   // (Type:driver(1 is default driver), STEP, DIR)
AccelStepper j1Stepper_L(1, 7, 6);   // (Type:driver(1 is default driver), STEP, DIR)
AccelStepper j1Stepper_R(1, 16, 15);   // (Type:driver(1 is default driver), STEP, DIR)
AccelStepper j2Stepper(1, 10, 9);   // (Type:driver(1 is default driver), STEP, DIR)
 
void setup() {
  //Init steppers (Half steps)
  baseStepper.setMaxSpeed(2000); //400 pulse/rev
  j1Stepper_L.setMaxSpeed(2000); //400 pulse/rev
  j1Stepper_R.setMaxSpeed(2000); //400 pulse/rev
  j2Stepper.setMaxSpeed(2000); //400 pulse/rev

  wrist.attach(wristPin);
  gripper.attach(gripperPin);

  //Initialize Serial Monitors
  Serial.begin(115200);
  Serial1.begin(115200, SERIAL_8N1, 17, 18); //(TX, RX)
  
  moveGripper(0);
  resetDis();
  //Start position
  goHome();
}

void loop() 
{
  
  if (Serial1.available() > 0) //Serial1 becuase it's the second set of serial pins/Serial input code. Tells us which piece to move
  {
    //Read the data
    serialNum = Serial1.read(); //Coords from chess engine
    //serialNum = Serial.parseInt(); //Used for testing/Stockfish. Comment out line 96 and un comment this one for mannual inputs. Also, change Serial1.available to Serial.available
    if (serialNum > 0)
    {
      resetDis();
      reqRow = serialNum / 10;  //Divide by 10 to get the ones digit (integer division)
      if (reqRow == 8)
        reqRow = 0;
      reqCol = serialNum % 10;  //Use modulus operator to get the tens digit
      if (reqCol == 8)
        reqCol = 0;
      if (reqRow != 7)
        moveToPiece(reqRow, reqCol);
    }
  }
  else if (atPiece())
  {
    down = true;
    moveDown(90);
  }
  else if (down && atPosition())
  {
    moveGripper(gripperNum);
    changeGripperNum();
    delay(1000);
    up = true;
    grab = false; //Dont update gripper while moving up
    moveUp(90);
    down = false;
  }
  else if (up && atPosition())
  {
    resetDis();
    goHome();
    grab = true;
    up = false;
  }

  inverseKinematics(x, y, z); //x, y & z are the coordinates sent from the controller. ARM MUST BE COMPLETELY VERTICAL AT START TO WORK (home position, since all relative to y-axis)

  if (theta3 > 0 && grab)
    //*.666667 because I had to scale the 0-180deg write value to 0-270. (Used 270deg servo). Also you need make sure gripper has access to full range of motion when mounting. (If max rotation 270deg, mount it in a way so it can rotate that)
    wrist.write(theta3 * .666667);

  //Calc degrees to steps and move (assuming 400 steps/rev)
  //Tell the motors which way to get to theta if past 90deg. (Do the motors need to go left or right)
  baseStepper.moveTo(delta*16.666667); //Set target position (16.666667 steps/degree).
  if (abs(baseStepper.distanceToGo()) > baseMaxDis) //Find distance to target position relative to start of movement
    baseMaxDis = abs(baseStepper.distanceToGo());
  baseSpeed = baseMaxDis/timeToTarget;
  if (isClose(baseStepper, baseMaxDis*.1)) //Slow down if wihin 10% of target
    baseSpeed *= .75;
  baseStepper.setSpeed(baseSpeed); // steps/sec
  

  if (theta1 > 90)
  {
    j1Stepper_L.moveTo((90 - theta1) * -37.037037); //Set target position (37.037037 steps/degree)
    j1Stepper_R.moveTo((90 - theta1) * 37.037037); //Set target position (37.037037 steps/degree)
    if (abs(j1Stepper_R.distanceToGo()) > j1MaxDis) //Find distance to target position relative to start of movement
      j1MaxDis = abs(j1Stepper_R.distanceToGo());
    j1Speed = j1MaxDis/timeToTarget;
    if (isClose(j1Stepper_R, j1MaxDis*.1)) //Slow down if wihin 10% of target
      j1Speed *= .75;
    j1Stepper_L.setSpeed(j1Speed);
    j1Stepper_R.setSpeed(-j1Speed); //Neg. since it needs to move in the other direction
  }
  else
  {
    //90 - theta1 to make it relative to y-axis
    j1Stepper_L.moveTo((90 - theta1) * -37.037037); //Set target position (37.037037 steps/degree)
    j1Stepper_R.moveTo((90 - theta1) * 37.037037); //Set target position (37.037037 steps/degree)
    if (abs(j1Stepper_R.distanceToGo()) > j1MaxDis) //Find distance to target position relative to start of movement
      j1MaxDis = abs(j1Stepper_R.distanceToGo());
    j1Speed = j1MaxDis/timeToTarget;
    if (isClose(j1Stepper_R, j1MaxDis*.1)) //Slow down if wihin 10% of target
      j1Speed *= .75;
    j1Stepper_L.setSpeed(j1Speed);
    j1Stepper_R.setSpeed(-j1Speed); //Neg. since it needs to move in the other direction
  }  

  j2Stepper.moveTo(theta2*137.335640); //Set target position (137.335640 steps/degree).
  if (abs(j2Stepper.distanceToGo()) > j2MaxDis) //Find distance to target position relative to start of movement
    j2MaxDis = abs(j2Stepper.distanceToGo());
  j2Speed = j2MaxDis/timeToTarget;
  if (isClose(j2Stepper, j2MaxDis*.1)) //Slow down if wihin 10% of target
    j2Speed *= .75;
  j2Stepper.setSpeed(j2Speed);  

  baseStepper.runSpeedToPosition();
  j1Stepper_L.runSpeedToPosition();
  j1Stepper_R.runSpeedToPosition();
  j2Stepper.runSpeedToPosition();
}

void inverseKinematics(float x, float y, float z) //x & y are desired position coordinates (mm)
{

  const float pi = 3.141593;
  float j1 = 255.68; //Length J1 in mm
  float j2 = 428.40; //Length J2 in mm

  //Z move
  delta = atan(z/x); //Angle base needs to move
  delta *= (180/pi); //Radians to degrees

  float x2 = sqrt(sq(z) + sq(x)) - x; //Difference added to x to stay alligned with x-coord as base moves

  if (z != 0)
    x += x2;

  theta2 = -acos((sq(x) + sq(y) -sq(j1) - sq(j2)) / (2 * j1 * j2)); //Calculate theta2 (in rads)

  theta1 = atan(y / x) + atan((j2 * sin(theta2)) / (j1 + j2 * cos(theta2))); //Calculate theta1 (in rads)

  //Radians to degrees
  theta2 *= (180/pi);
  theta1 *= (180/pi);
  
  //Adjust angles 
  if (theta2 < 0 && theta1 > 0) 
  {
    if (theta1 < 90)
    {
      theta1 += (180-(theta1 * 2)); //Mirror across y
      theta2 *= -1;
    }
    else if (theta1 > 90)
    {
      theta1 = theta1 - (2 * (theta1 - 90)); //Mirror across y
      theta2 *= -1;
    }
  }
  else if (theta1 < 0 && theta2 < 0)
  {
    theta1 *= -1;
    theta2 *= -1;
  }

  //Gripper orientation. 
  //Psi is desired orientation with respect to y-axis. (180 is straight down)
  theta3 = psi - theta2 - (90 - theta1); //(90 - theta1) so we can make it relative to y-axis. Did it here so it wouldn't be an abs(value)
  theta3 = 185 - theta3; //185 because that is the angle for gripper to be straight, & minus sign because down is negative for how I mounted the gripper
  
}

//If a stepper motor is close to target position, return true
bool isClose(AccelStepper s1, int threshold) //"s1" corresponds with the stepper motor declared in the function call, threshold is steps to be considered close
{
  if (abs(s1.distanceToGo()) < threshold)
  {
    return true;
  }
  return false;
}
bool atPiece()
{
  if (j1Stepper_R.distanceToGo() == 0 && j1Stepper_L.distanceToGo() == 0 && j2Stepper.distanceToGo() == 0 && baseStepper.distanceToGo() == 0 && piece)
  {
    return true;
  }
  return false;
}
bool atPosition()
{
  if (j1Stepper_R.distanceToGo() == 0 && j1Stepper_L.distanceToGo() == 0 && j2Stepper.distanceToGo() == 0 && baseStepper.distanceToGo() == 0)
  {
    return true;
  }
  return false;
}

//Move functions
void goHome() //Move to center above the board
{
  x = 400;
  y = -350;
  z = 0;
  piece = false;
}
void moveToPiece(int row, int col) //row, col, array size
{
  x = chessBoard[row][col][0];
  y = chessBoard[row][col][1];
  z = chessBoard[row][col][2];

  piece = true;
}
void moveDown(float yAmount) 
{
  y += yAmount; //Remember, down is positive

  piece = false;
}
void moveUp(float yAmount)
{
  y -= yAmount; //Remember, down is positive 
  
  piece = false;
}

//Open or close gripper
void moveGripper(int val) //1 to close, 0 to open
{
  if (val == 0)
    gripper.write(110);
  else
    gripper.write(145);
}
void changeGripperNum()
{
  if (gripperNum == 1)
    gripperNum = 0;
  else
    gripperNum = 1;
}

void resetDis()
{
  j1MaxDis = 0;
  j2MaxDis = 0;
  baseMaxDis = 0;
}
